(()=>{"use strict";let e=e=>{let[l,o]=e;return[[l+1,o+2],[l-1,o+2],[l+2,o+1],[l-2,o+1],[l+2,o-1],[l-2,o-1],[l+1,o-2],[l-1,o-2]]};((l,o)=>{let t=((e,l)=>{let o=[];for(let e=0;e<8;e++)o.push(new Array(8).fill(0));return o})();console.log(t);let r=[l],s=!1,n=new Set;for(;r.length>0;){let l=r.shift();if(l[0]==o[0]&&l[1]==o[1]){s=!0;break}let f=e(l);for(let e of f){let[o,s]=e,f=`${o},${s}`;o>=0&&o<8&&s>=0&&s<8&&!n.has(f)&&(r.push(e),console.log(f),n.add(f),t[o][s]=l)}}if(s){let e=[],r=o;for(;r[0]!=l[0]||r[1]!=l[1];)e.push(r),r=t[r[0]][r[1]];e.push(r),e.reverse(),console.log(`You made it in ${e.length-1} moves! Here's your path:`);for(let l of e)console.log(l)}else console.log("Path not found")})([3,3],[4,3])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQU8sSUNBSUEsRUFBaUJDLElBQ3hCLElBQUtDLEVBQUdDLEdBQUtGLEVBQ2IsTUFBTyxDQUNILENBQUNDLEVBQUUsRUFBR0MsRUFBRSxHQUNSLENBQUNELEVBQUUsRUFBR0MsRUFBRSxHQUNSLENBQUNELEVBQUUsRUFBR0MsRUFBRSxHQUNSLENBQUNELEVBQUUsRUFBR0MsRUFBRSxHQUNSLENBQUNELEVBQUUsRUFBR0MsRUFBRSxHQUNSLENBQUNELEVBQUUsRUFBR0MsRUFBRSxHQUNSLENBQUNELEVBQUUsRUFBR0MsRUFBRSxHQUNSLENBQUNELEVBQUUsRUFBR0MsRUFBRSxHQUNYLEVDUmEsRUFBQ0MsRUFBT0MsS0FDdEIsSUFBSUMsRUZKZSxFQUFDQyxFQUFNQyxLQUMxQixJQUFJQyxFQUFTLEdBQ2YsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVFRVEsRUZGRUEsSUFDeEJELEVBQU9FLEtBQUssSUFBSUMsTUVDUyxHRkRNQyxLQUFLLElBRXRDLE9BQU9KLENBQU0sRUVEQ0ssR0FDWkMsUUFBUUMsSUFBSVYsR0FFWixJQUFJVyxFQUFRLENBQUNiLEdBQ1RjLEdBQVEsRUFDUkMsRUFBVSxJQUFJQyxJQUVsQixLQUFPSCxFQUFNSSxPQUFTLEdBQUcsQ0FDckIsSUFBSXBCLEVBQWVnQixFQUFNSyxRQUV6QixHQUFJckIsRUFBYSxJQUFNSSxFQUFJLElBQU1KLEVBQWEsSUFBTUksRUFBSSxHQUFJLENBQ3hEYSxHQUFRLEVBQ1IsS0FDSixDQUVBLElBQUlLLEVBQVF2QixFQUFjQyxHQUMxQixJQUFLLElBQUl1QixLQUFRRCxFQUFPLENBQ3BCLElBQUtyQixFQUFHQyxHQUFLcUIsRUFDVEMsRUFBYyxHQUFHdkIsS0FBS0MsSUFFdEJELEdBQUssR0FBS0EsRUFBSSxHQUFLQyxHQUFLLEdBQUtBLEVBQUksSUFBTWdCLEVBQVFPLElBQUlELEtBQ25EUixFQUFNTixLQUFLYSxHQUNYVCxRQUFRQyxJQUFJUyxHQUNaTixFQUFRUSxJQUFJRixHQUNabkIsRUFBTUosR0FBR0MsR0FBS0YsRUFFdEIsQ0FDSixDQUVBLEdBQUlpQixFQUFPLENBQ1AsSUFBSVUsRUFBTyxHQUNQQyxFQUFrQnhCLEVBR3RCLEtBQU93QixFQUFnQixJQUFNekIsRUFBTSxJQUFNeUIsRUFBZ0IsSUFBTXpCLEVBQU0sSUFDakV3QixFQUFLakIsS0FBS2tCLEdBQ1ZBLEVBQWtCdkIsRUFBTXVCLEVBQWdCLElBQUlBLEVBQWdCLElBR2hFRCxFQUFLakIsS0FBS2tCLEdBQ1ZELEVBQUtFLFVBRUxmLFFBQVFDLElBQUksa0JBQWtCWSxFQUFLUCxPQUFTLDhCQUM1QyxJQUFLLElBQUlVLEtBQVVILEVBQ2ZiLFFBQVFDLElBQUllLEVBRXBCLE1BQ0loQixRQUFRQyxJQUFJLGlCQUNoQixFQUdKZ0IsQ0FBWSxDQUFDLEVBQUcsR0FBSSxDQUFDLEVBQUcsRyIsInNvdXJjZXMiOlsid2VicGFjazovL2tuaWdodHMtdHJhdmFpbHMvLi9zcmMvZ2FtZWJvYXJkLmpzIiwid2VicGFjazovL2tuaWdodHMtdHJhdmFpbHMvLi9zcmMvZ2VuZXJhdGVNb3Zlcy5qcyIsIndlYnBhY2s6Ly9rbmlnaHRzLXRyYXZhaWxzLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBsZXQgZ2FtZWJvYXJkID0gKHJvd3MsIGNvbHVtbnMpID0+IHtcbiAgICBsZXQgbWF0cml4ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgbWF0cml4LnB1c2gobmV3IEFycmF5KGNvbHVtbnMpLmZpbGwoMCkpOyAvLyBGaWxsIGVhY2ggcm93IHdpdGggaW5pdGlhbCB2YWx1ZXMgKGUuZy4sIDApXG4gIH1cbiAgcmV0dXJuIG1hdHJpeDtcbn0iLCJleHBvcnQgbGV0IGdlbmVyYXRlTW92ZXMgPSAoY3VycmVudFBsYWNlKSA9PiB7XG4gICAgbGV0IFt4LCB5XSA9IGN1cnJlbnRQbGFjZTtcbiAgICByZXR1cm4gW1xuICAgICAgICBbeCsxLCB5KzJdLFxuICAgICAgICBbeC0xLCB5KzJdLFxuICAgICAgICBbeCsyLCB5KzFdLFxuICAgICAgICBbeC0yLCB5KzFdLFxuICAgICAgICBbeCsyLCB5LTFdLFxuICAgICAgICBbeC0yLCB5LTFdLFxuICAgICAgICBbeCsxLCB5LTJdLFxuICAgICAgICBbeC0xLCB5LTJdLFxuICAgIF07XG4gICAgXG59IiwiaW1wb3J0IHsgZ2FtZWJvYXJkIH0gZnJvbSBcIi4vZ2FtZWJvYXJkXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZU1vdmVzIH0gZnJvbSBcIi4vZ2VuZXJhdGVNb3Zlc1wiO1xuXG5sZXQga25pZ2h0TW92ZXMgPSAoc3RhcnQsIGVuZCkgPT4ge1xuICAgIGxldCBib2FyZCA9IGdhbWVib2FyZCg4LCA4KTtcbiAgICBjb25zb2xlLmxvZyhib2FyZCk7XG5cbiAgICBsZXQgcXVldWUgPSBbc3RhcnRdO1xuICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgIGxldCB2aXNpdGVkID0gbmV3IFNldCgpOyAvLyBTdG9yZSB2aXNpdGVkIHBvc2l0aW9uc1xuXG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IGN1cnJlbnRQbGFjZSA9IHF1ZXVlLnNoaWZ0KCk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRQbGFjZVswXSA9PSBlbmRbMF0gJiYgY3VycmVudFBsYWNlWzFdID09IGVuZFsxXSkge1xuICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbW92ZXMgPSBnZW5lcmF0ZU1vdmVzKGN1cnJlbnRQbGFjZSk7XG4gICAgICAgIGZvciAobGV0IG1vdmUgb2YgbW92ZXMpIHtcbiAgICAgICAgICAgIGxldCBbeCwgeV0gPSBtb3ZlO1xuICAgICAgICAgICAgbGV0IG5ld1Bvc2l0aW9uID0gYCR7eH0sJHt5fWA7IC8vIENvbnZlcnQgdGhlIG1vdmUgdG8gYSBzdHJpbmcgZm9yIGVhc2llciBTZXQgY29tcGFyaXNvblxuXG4gICAgICAgICAgICBpZiAoeCA+PSAwICYmIHggPCA4ICYmIHkgPj0gMCAmJiB5IDwgOCAmJiAhdmlzaXRlZC5oYXMobmV3UG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgcXVldWUucHVzaChtb3ZlKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhuZXdQb3NpdGlvbilcbiAgICAgICAgICAgICAgICB2aXNpdGVkLmFkZChuZXdQb3NpdGlvbik7IC8vIE1hcmsgdGhlIG5ldyBwb3NpdGlvbiBhcyB2aXNpdGVkXG4gICAgICAgICAgICAgICAgYm9hcmRbeF1beV0gPSBjdXJyZW50UGxhY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgbGV0IHBhdGggPSBbXTtcbiAgICAgICAgbGV0IGN1cnJlbnRQb3NpdGlvbiA9IGVuZDtcblxuICAgICAgICAvLyBCYWNrdHJhY2sgdG8gZmluZCB0aGUgcGF0aCBmcm9tIGVuZCB0byBzdGFydFxuICAgICAgICB3aGlsZSAoY3VycmVudFBvc2l0aW9uWzBdICE9IHN0YXJ0WzBdIHx8IGN1cnJlbnRQb3NpdGlvblsxXSAhPSBzdGFydFsxXSkge1xuICAgICAgICAgICAgcGF0aC5wdXNoKGN1cnJlbnRQb3NpdGlvbik7XG4gICAgICAgICAgICBjdXJyZW50UG9zaXRpb24gPSBib2FyZFtjdXJyZW50UG9zaXRpb25bMF1dW2N1cnJlbnRQb3NpdGlvblsxXV07XG4gICAgICAgIH1cblxuICAgICAgICBwYXRoLnB1c2goY3VycmVudFBvc2l0aW9uKTtcbiAgICAgICAgcGF0aC5yZXZlcnNlKCk7XG5cbiAgICAgICAgY29uc29sZS5sb2coYFlvdSBtYWRlIGl0IGluICR7cGF0aC5sZW5ndGggLSAxfSBtb3ZlcyEgSGVyZSdzIHlvdXIgcGF0aDpgKTtcbiAgICAgICAgZm9yIChsZXQgc3F1YXJlIG9mIHBhdGgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHNxdWFyZSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygnUGF0aCBub3QgZm91bmQnKTtcbiAgICB9XG59XG5cbmtuaWdodE1vdmVzKFszLCAzXSwgWzQsIDNdKTsiXSwibmFtZXMiOlsiZ2VuZXJhdGVNb3ZlcyIsImN1cnJlbnRQbGFjZSIsIngiLCJ5Iiwic3RhcnQiLCJlbmQiLCJib2FyZCIsInJvd3MiLCJjb2x1bW5zIiwibWF0cml4IiwiaSIsInB1c2giLCJBcnJheSIsImZpbGwiLCJnYW1lYm9hcmQiLCJjb25zb2xlIiwibG9nIiwicXVldWUiLCJmb3VuZCIsInZpc2l0ZWQiLCJTZXQiLCJsZW5ndGgiLCJzaGlmdCIsIm1vdmVzIiwibW92ZSIsIm5ld1Bvc2l0aW9uIiwiaGFzIiwiYWRkIiwicGF0aCIsImN1cnJlbnRQb3NpdGlvbiIsInJldmVyc2UiLCJzcXVhcmUiLCJrbmlnaHRNb3ZlcyJdLCJzb3VyY2VSb290IjoiIn0=